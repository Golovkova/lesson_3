#1
import itertools
import time


class TrafficLight:
    __color: str
    __time_duration: dict

    def __init__(self, red_time: int = 7, yellow_time: int = 2, green_time: int = 2):
        self.__time_duration = {
            "red": red_time,
            "yellow": yellow_time,
            "green": green_time
        }

    def switching(self):
        for mode, timer in itertools.cycle(self.__time_duration.items()):
            self.__color = mode

            for second in range(timer):
                print(f"{self} [{second + 1}]")
                time.sleep(1)

    def __repr__(self):
        return f"Текущий режим = {self.__color}"
try:
    trafficlight2 = TrafficLight(7, 2, 2)
    trafficlight2.switching()
except KeyboardInterrupt:
    print("завершение")


№2
class Road:
    _weight: float = 86
    _length: float
    _width: float

    def __init__(self, length: float, width: float):
        self._length = length
        self._width = width

    def calculate(self, thickness: float = 1):
        return (self._length * self._width * self._weight * thickness) / 1000


road = Road(100, 50)
calculation = road.calculate(5)

print(f"{calculation} тонн")

№3
class Worker:
    name: str
    surname: str
    position: str
    _income: dict

    def __init__(self, name: str, surname: str, position: str, wage: int, bonus: int):
        self.name = name
        self.surname = surname
        self.position = position
        self._income = {
            "wage": wage,
            "bonus": bonus
        }

class Position(Worker):
    def get_full_name(self):
        return f"{self.name} {self.surname}"

    def get_total_income(self):
        return sum(self._income.values())


Anna = Position("Anna", "Petrova", "Developer", 200, 100)
print(Anna.get_full_name(), Anna.get_total_income())

№4
class Car:
    speed: int
    color: str
    name: str
    is_police: bool = False

    def __init__(self, speed: int, color: str, name: str) -> None:
        self.speed = speed
        self.color = color
        self.name = name

    def go(self):
        print(f"{self.name}: старт")

    def stop(self):
        print(f"{self.name}: стоп")

    def side(self, direction: str):
        print(f"{self.name}: поворот - {direction}")

    def show_speed(self):
        print(f"{self.name}: скорость = {self.speed}")


class TownCar(Car):
    def show_speed(self):
        super().show_speed()
        if self.speed > 60:
            print(f"{self.name}: превышение скорости")


class SportCar(Car):
    pass


class WorkCar(Car):
    def show_speed(self):
        super().show_speed()
        if self.speed > 50:
            print(f"{self.name}: превышение скорости")


class PoliceCar(Car):
    is_police: bool = True


cars = [
    SportCar(240, 'red', 'auto1'),
    TownCar(180, 'silver', 'auto2'),
    WorkCar(80, 'white', 'auto3'),
    PoliceCar(170, 'black', 'auto4'),
]

cars[0].go()
cars[0].side("направо")
cars[0].stop()

for car in cars:
    car.show_speed()




№5 
class Stationery:
    title: str
    msg = "Запуск отрисовки."

    def draw(self):
        print(self.msg)

class Pen(Stationery):
    title = 'Ручка'
    msg = f"{title} - синего цвета."

class Pencil(Stationery):
    title = 'Карандаш'
    msg = f"{title} - нужен для создания чертежа."

class Handle(Stationery):
    title = 'Маркер'
    msg = f"{title} - выделяет цветом предложения в тексте."

items = [Pen(), Pencil(), Handle()]
for item in items:
    item.draw()

